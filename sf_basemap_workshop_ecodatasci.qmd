---
title: "Spatial Data Visualization"
author: "Rachel King"
date: today
editor: visual
format: 
  html:
    theme: cosmo
    toc: true
    toc-title: Sections
    toc-location: left
---

# Helpful Background

This workshop will be most helpful if you have spent some time working with data 
in R, either for data analysis or visualization. Specifically, the workshop will
be most helpful if you are: 

- comfortable with the basics of working with data in R (reading in data, tidyverse functions, making a graph with ggplot)

- familiar with different types of spatial data (not necessarily working with them in R)

- have an interest in spatial data and learning how R can help you with spatial data visualization 

The primary purpose is to demonstrate how to use R to visualize spatial data, 
rather than give a full tutorial on the basics of geospatial data though we will 
review some basic concepts quickly. Therefore we may not cover some important 
concepts that are important for spatial data analysis, For more in-depth learning 
I recommend reading "Geocomputation with R" by Lovelace et al. (2024), a free 
ebook available here: https://r.geocompx.org/.

# Goals and Learning Outcomes 

By the end of the session you should be able to: 

1. Read in and map simple spatial data 

2. Add a basemap, scalebar and north arrow to your maps

3. Understand how you can use R to streamline the map-making process (using themes and functions)

# Set Up

## Loading Packages

First we need to load packages and data for our mapping. Note that some of these 
packages will only work if you have already installed GDAL (Geospatial Data Abstraction Library) - 
a "computer software library for reading and writing raster and vector geospatial data formats". 

```{r load-packages}
#| message: false
#| warning: false

# General Packages
library(tidyverse) # data manipulation and plotting 
library(ggplot2)   # plotting and mapping
library(patchwork) # combining maps/plots

# Spatial Packages
library(sf)        # manipulating spatial data
library(ggspatial) # retrieving basemap, adding scale and arrowbar
library(maptiles)  # retrieving basemap
library(terra)     # working with raster data
library(tidyterra) # functions for working with raster

# Data 
library(tigris)  # shapefiles with various administrative boundaries and roads

```

Another good option for plotting spatial data in R is the `tmap` package with 
companion package `tmaptools`. However, the syntax is slightly different so I 
won't cover that today. It does allow an interactive view feature via Leaflet 
which is nice, and maybe the subject for a future EcoDataScience workshop.

# Part I: Intro to working with spatial data with the **`sf`** package

## Load Data 

### About the Data

The data used here are open source data available either on the KNB data repository
or from the US Government. The specific data sources and citations are listed below:

| Data                      | Original Dataset                                 |
|---------------------------|--------------------------------------------------|
| Study Sites               | cj lortie, M Zuliani, Nargol Ghazian, Jenna Braun, S Haas, & Rachel King. 2022. A list of ecological study sites within Central California Drylands. Knowledge Network for Biocomplexity. [doi:10.5063/F1F76B1R](https://doi.org/10.5063/F1F76B1R). |
| California Ecoregions     | U.S. Environmental Protection Agency. 2012. Level IV Ecoregions of California. U.S. EPA Office of Research and Development (ORD) - National Health and Environmental Effects Research Laboratory (NHEERL), Corvallis, OR. [California Level IV Ecoregions](https://www.epa.gov/eco-research/ecoregion-download-files-state-region-9#pane-04) |
| California State Boundary | U.S. Census Bureau TIGER/Line Shapefiles. (2023). [](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html) |

### Method 1: From a `.csv` file

We will download the site data from KNB to show how to read in data from a `.csv` 
file and prepare it for mapping. When you use a `.csv` you will have to convert 
it to an `sf` object to use the `sf` package functions for easier plotting, which
I will show in a moment.

Download site data from: [California Dryland Sites](https://doi.org/10.5063/F1F76B1R)

https://doi.org/10.5063/F1F76B1R

```{r load-data-1}
# read in data from .csv file
site_df <- read_csv("https://knb.ecoinformatics.org/knb/d1/mn/v2/object/urn%3Auuid%3A5d23a3f4-6ed8-47f0-b34e-000f6cfb8313")

# alternatively download into your working directory and run 
# site_df <- read_csv("tidy_regional_2023.csv")

```

### Method 2: From a shapefile

The second data layer we will read in is a shapefile with ecoregions for California
that is provided by the US EPA: [California Level IV Ecoregions](https://www.epa.gov/eco-research/ecoregion-download-files-state-region-9#pane-04)

You'll need to download and unzip the data file into your working directory for
the following code to work. 

::: {.callout-important}
When reading in a shapefile, you use the filename with the `.shp` 
extension, but the associated files from the zipped folder are required for the
data to read in properly. So, if you only unzip and then only copy the `.shp` file
into your working directory or data folder for a project you will get an error
message. 
:::

```{r load-data-2}
# read in data from shapefile
ecoreg_sf <- sf::read_sf("data/ca_ecoregion_shape/ca_eco_l4.shp")
```

### Method 3: From a package

The `tigris` package allows you to easily download TIGER/Line shapefiles from 
the US Census Bureau for things like state boundaries, roads, county lines, etc. 
The `tidycensus` package that was in a previous EcoDataScience Workshop uses this 
package when getting spatial data. 

We'll use it to download some boundaries for the state of California. 

```{r load-data-3}
#| message: false

# read in data using package 
states_sf <- tigris::states(progress_bar = FALSE)
CA_counties_sf <- tigris::counties(state = "CA", progress_bar = FALSE)
```


## Working with `sf` data

Now we'll see some useful features of the `sf` package and how to access and set
important spatial information from your data. 

### Basics of `sf` data types

talk about "attribute tables" 

### Identify and set the CRS

Essential that the CRS of your spatial data match

When you read in data from a shapefile or a package the data will usually already
have the CRS information associated with the data. 

When you are reading in data from a `.csv` file, you need to set the CRS yourself 
when you convert your `data.frame` into an `sf` object. Thus, you'll need to check the 
metadata to find the appropriate CRS. 

You'll often see lat/long data use the WGS84 CRS, which is a geographic coordinate reference system. 

An easy way to specify this is to use the **EPSG** code (European Petroleum Survey Group), 
which references a database of the associated geodetic parameters for common CRS. 
The code for the WGS84 is **EPSG:4326**. 

```{r csv-to-sf}
colnames(site_df) # check column names

# The coordinate information is in the "long" and "lat column
site_sf <- site_df %>% 
  st_as_sf(
    coords = c("long", "lat"), # specify where spatial data is; "longitude" is first
    crs    = "EPSG:4326"      # need to tell it what the CRS is
  )
```

Now you'll see that our site data not just a data frame but is also now an `sf` object,
which allows us to use all of the `sf` functions with this data now. 

```{r}
class(site_sf)

head(site_sf)
```

You'll also see that we have some new attribute information associated with this
object: 

- Geometry Type: Point

- Dimension

- Bounding Box

- CRS 

We can also access this info with some common `sf` functions:

```{r}
# get the crs
st_crs(site_sf)

# retrieve the bounding box around all points in the object
st_bbox(site_sf)

st_geometry_type(site_sf)
```

Now we need to check the CRS for the other datasets to see if they match: 

```{r}
# crs for ecoregions
st_crs(ecoreg_sf)

st_crs(states_sf)

```

So, all of our spatial data sets currently have different CRS. We will need to reproject 
the data from two of the three so that we will be able to map all our data at the
same time.  

### Basic Spatial Data Operations

We can use the `st_transform` function to project our data into the same CRS.

But which CRS should we choose for our map making? It depends on what you are doing... 
The site data and state data are in geographic CRS (not projected) while the ecoregion 
data are in the USA Contiguous Albers Equal Area Conic USGS version projected CRS. 
If we're making a map for a web-based application, those often use geographic CRS
like WGS84 (googlemaps, openstreetmap) but for a static map it may make sense to 
use a projection more specific to your area or goal (e.g. equal area). For simplicity, 
today I'll transform the state and site data to the CRS of the ecoregion data. 

```{r}
# project site and state lines to ecoreg CRS
states_proj_sf <- st_transform(states_sf, st_crs(ecoreg_sf))
site_proj_sf   <- st_transform(site_sf, st_crs(ecoreg_sf))
```

The states dataset also contains data for ALL US states. We can filter this data
just like any other dataset so we just have the outline for California: 

```{r}
ca_proj_sf <- states_proj_sf %>%
  filter(NAME == "California")
```

There are some sites that are outside the state of California, and I only want to
map the California locations. We can use the state outline to filter our site 
data to just include the sites within our area of interest: 

```{r}
str(site_proj_sf)
unique(site_proj_sf$state) 

site_ca_proj_sf <- site_proj_sf %>% 
  st_filter(ca_proj_sf, .predicate = st_covered_by)

str(site_ca_proj_sf)
unique(site_ca_proj_sf$state)

```

Here we used the `st_filter` function which can take a user-specified predicate
function to "keep the geometries in x where .predicate(x,y) returns any match in 
y for x". So, `st_covered_by` will return all values in x (`site_proj_sf`) that are 
covered by y (`ca_proj_sf`). 

Now, if I wanted to know the ecoregion of each of my sites I could also find that
out using a spatial join. Using `st_join` we will add in the attributes of the 
`ecoreg_sf` object at any location that intersects the coordinates from the `site_ca_proj_sf` 
object. 

```{r}
site_ecoreg_sf <- st_join(site_ca_proj_sf, ecoreg_sf, join = st_intersects)
# st_intersects is the default

colnames(site_ecoreg_sf)

```

## Making the map

Finally it's time to make our map! One of the simplest ways to do this is to 
use `ggplot2` which works well with `sf` objects. 


```{r}
#TODO build this map out slowly, one element at a time

ggplot() + # don't specify data here since we have multiple data sets to plot
  geom_sf(data = ca_proj_sf, fill = NA) + # must specify "data = " or it will throw an error
  geom_sf(data = ecoreg_sf, aes(fill = US_L3NAME)) + # like other data you can set fill 
  geom_sf(data = site_ca_proj_sf) +
  scale_fill_discrete(name = "US L3 Ecoregion") +
  guides(fill = guide_legend(ncol = 1, title.position = "top")) +
  theme_bw() 
```

You can also use `facet_wrap()` to split your map into smaller maps with any of your variables.

```{r}
ggplot() + # don't specify data here since we have multiple data sets to plot
  geom_sf(data = ca_proj_sf, fill = NA) + # must specify "data = " or it will throw an error
  geom_sf(data = ecoreg_sf, aes(fill = US_L3NAME)) + # like other data you can set fill 
  geom_sf(data = site_ca_proj_sf) +
  scale_fill_discrete(name = "US L3 Ecoregion") +
  guides(fill = guide_legend(ncol = 1, title.position = "top")) +
  theme_bw() +
  facet_wrap(~desert)

```

Unfortunately, when using `geom_sf` the `scales = "free"` option doesn't work with
faceting, so if you want to create a map with something that looks like facets 
it is probably easier to create two separate maps and combine them using either 
the `patchwork` or `cowplot` package. 

# Part II: Add a Basemap

Basemaps provide important geographical context for your data and can serve as 
an important visual references for your maps. In GIS programs it is often pretty
easy to add a basemap layer, but in R there are a few additional steps and are produced by various sources 

## My Favorite Basemap Providers, Packages and Functions

There are many options for basemaps for your mapping projects in R, as well as 
several different packages for working with those map layers. Basemaps are provided 
as a series of tiles from various basemap providers, some are freely available and
others require registration and/or a subscription to access them via an API key. 
Below I list the providers of various basemaps

**Basemap Data Providers**:

*: requires registration but has a free tier
**: paid service

- OpenStreetMap

- Stamen via Stadia*

- Thunderforest*

- Carto**

- [Mapbox](https://www.mapbox.com/static-maps)*

- Google

**Basemap R Packages**

Make it "easy" to download and bring in the basemap tiles to R. In reality, I have 
found that some packages are much easier than others to work with. 

My favorites: 

- [`ggspatial`](https://paleolimbot.github.io/ggspatial/index.html)

    - uses `rosm::osm.image()` to display/fetch map tiles
    
    - easy integration with ggplot (returns a ggplot layer) 
    
    - can't directly specify spatial extent, uses your data 

- [`maptiles`](https://github.com/riatelab/maptiles) 

    - pretty easy to download 
    
    - doesn't 

**Other Packages to Examine**

- [`ggmap`](https://github.com/dkahle/ggmap): requires google maps API key to use, even if tile provider doesn't require one; visualizes with `ggplot`; good for getting Google Maps

- [`mapboxapi`](https://walker-data.com/mapboxapi/): requires Mapbox account (there is a free tier)

- [`OpenStreetMap`](https://github.com/ifellows/ROSM): requires Java installation

- [`rosm`](https://github.com/paleolimbot/rosm): not designed to work with `ggplot`, uses `prettymapr`

- [`basemapR`](https://github.com/Chrisjb/basemapR): works with `ggplot` but not on CRAN

- [`basemaps`](https://jakob.schwalb-willmann.de/basemaps/): many formats to download basemaps, but removed from CRAN and currently down't work for me 

- [`rgooglemaps`](https://github.com/markusloecher/rgooglemaps)

- [`ceramic`](https://hypertidy.github.io/ceramic/)

- [`mapsapi`](https://michaeldorman.github.io/mapsapi/)

- [`ggOceanMaps`](https://mikkovihtakari.github.io/ggOceanMaps/): designed for ocean sciences, visualizes with `ggplot2`

    - some additional ocean map packages: `marmap`, `oceanmap`, `oce`

## Retrieving your basemap

This usually requires you to set an extent or bounding box for your download, as 
well as specify the zoom level you want. 

[Check - the zoom level can influence whether your output map looks grainy or not]

### Using `ggspatial` 

What are the built-in basemap options?

```{r}
rosm::osm.types()
```


```{r ggspatial-basemap}
#| fig-width: 8

map_nobase <- ggplot() + # don't specify data here since we have multiple data sets to plot
  geom_sf(data = ca_proj_sf, fill = NA) + # must specify "data = " or it will throw an error
  geom_sf(data = site_ecoreg_sf, aes(color = US_L3NAME)) +
  scale_color_discrete(name = "Level 3 Ecoregion") +
  guides(fill = guide_legend(ncol = 1, title.position = "top")) +
  theme_bw() +
  theme(
    legend.position = "bottom",
    legend.direction = "vertical"
  )

map_nobase

map_wbase <- ggplot() + # don't specify data here since we have multiple data sets to plot
  ggspatial::annotation_map_tile(type = "osm", zoom = 6) + 
  geom_sf(data = ca_proj_sf, fill = NA) + # must specify "data = " or it will throw an error
  geom_sf(data = site_ecoreg_sf, aes(color = US_L3NAME)) +
  scale_color_discrete(name = "Level 3 Ecoregion") +
  guides(fill = guide_legend(ncol = 1, title.position = "top")) +
  theme_bw() +
  theme(
    legend.position = "bottom",
    legend.direction = "vertical"
  )

map_wbase

```

Compare the visual with and without the basemap. Aside from the basemap, can
you notice any differences? 

```{r}
library(patchwork)

map_nobase + map_wbase
```

Yes, the projection is different! That is one of the annoying things about 
using ggspatial - it downloads the basemaps in a specific CRS - the Web Mercator
projection (`EPSG:3857`). If it is the first layer added, then other layers are
reprojected to Web Mercator, which is why the two maps look different. 

If you want to have the map in the CRS of the data, specify a data argument in the 
call to `ggplot()`.

```{r}
#| fig-width: 8
#| fig-height: 8

ggplot(data = ca_proj_sf) + # specify data here to set CRS 
  ggspatial::annotation_map_tile(type = "osm", zoom = 6) + 
  geom_sf(fill = NA) + 
  geom_sf(
    data = site_ecoreg_sf, 
    aes(color = US_L3NAME)
    ) +
  scale_color_discrete(name = "Level 3 Ecoregion") +
  guides(fill = guide_legend(ncol = 1, title.position = "top")) +
  theme_bw() +
  theme(
    legend.position = "bottom",
    legend.direction = "vertical"
  )
```

Now the map is back in the projection of the data, which is helpful if you don't want to be stuck with only one option for the CRS of your map. 

::: {.callout-caution}
If you are reprojecting basemap tiles that include text, you may note that the
text is blurry or not as high-resolution. 
:::

### Using `maptiles`

```{r}
ca3857 <- st_transform(ca_proj_sf, "epsg:3857")
ca_osm <- get_tiles(ca3857, crop = TRUE)

ggplot(data = ca3857) + 
  geom_spatraster_rgb(data = ca_osm, r = 1, g = 2, b = 3) +
  geom_sf(fill = NA) +
  geom_sf(
    data = st_transform(site_ecoreg_sf, crs = "epsg:3857"), 
    aes(color = US_L3NAME) 
    #inherit.aes = FALSE # I've found I sometimes need to add this if I am having issues
    ) +
  scale_color_discrete(name = "Level 3 Ecoregion") +
  guides(fill = guide_legend(ncol = 1, title.position = "top")) +
  theme_bw() +
  theme(
    legend.position = "bottom",
    legend.direction = "vertical"
  )

```

### Additional basemap options 

In addition to the built-in tile servers, you can also source a basemap from using 
a URL for an xyz raster source with ggspatial. Make sure you include attributions for the basemap service you use. 
The [OpenStreetMap wiki](https://wiki.openstreetmap.org/wiki/Raster_tile_providers) page has a list of Tile providers and the urls for you to use 
to access them. Some of these servers require you to register, but many have a free tier for low volume users.

For this to work with `ggspatial`, you just put the URL in the "type" argument. 
You also need to make sure that the URL you use has a "$" in front of the {z}, {y}, and {x} otherwise the call returns an error. Additionally, make sure that there is an extension on the URL (.png, .jpg, or .jpeg) - 
this is also required for the function call to run properly.

```{r}
#| fig-width: 8
#| fig-height: 8

# the OpenTopo map tile provider
open_topo <- "https://a.tile.opentopomap.org/${z}/${x}/${y}.png"

ggplot(data = ca_proj_sf) + # specify data here to set CRS 
  ggspatial::annotation_map_tile(
    type = open_topo,
    zoom = 7
    ) + 
  geom_sf(fill = NA, linewidth = 2, color = "black") + # don't need to specify data here since we did in ggplot call
  geom_sf(
    data = site_ecoreg_sf, 
    aes(color = US_L3NAME) 
    ) +
  scale_color_discrete(name = "Level 3 Ecoregion") +
  guides(fill = guide_legend(ncol = 1, title.position = "top")) +
  theme_bw() +
  theme(
    legend.position = "bottom",
    legend.direction = "vertical"
  )

```

**Places to Retrieve Basemaps**

- [maptiler](https://documentation.maptiler.com/hc/en-us): XYZ rasters, free tier, requires API

- [xyzservices](https://xyzservices.readthedocs.io/en/stable/introduction.html): list of xyz sources, some free some require subscriptions

- [OpenStreetMap wiki](https://wiki.openstreetmap.org/wiki/Raster_tile_providers) 

- https://www.xyht.com/spatial-itgis/using-openstreetmap-basemaps-qgis-3-0/

- https://github.com/roblabs/xyz-raster-sources

### Basemap from File

You can also add a basemap from a file in a similar way to the `maptiles` code, if your basemap layer 
is a GeoTiff file (.tif). Simply read in your data layer with `terra` and add it to your plot with 
`tidyterra::geom_spatraster_rgb()` or `tidyterra::geom_spatraster()` if it is a single layer. 

Example: 

```{r}
#| eval: false
# This code not run, shown as a demo

# load aerial imagery from National Agricultural Imagery Program
naip_tif <- rast("data/naip_imagery.tif") 
samp_pts_sf <- st_read("data/shapefiles/sample_points.shp")

ggplot(data = samp_pts_sf) +
  geom_spatraster_rgb(data = naip_tif) + 
  geom_sf()

```

## Add a scalebar and north arrow

It is usually helpful to have a scalebar and north arrow for reference and orientation. There are built-in functions in `ggspatial` to make this easy: 

```{r}
#| fig-width: 8
#| fig-height: 8

ca_osm <- get_tiles(ca_proj_sf, crop = TRUE, zoom = 6, provider = "Esri.WorldImagery")

ggplot(data = ca_proj_sf) + # specify data here to set CRS 
  geom_spatraster_rgb(data = ca_osm) +
  geom_sf(fill = "transparent", color = "black", linewidth = 1) + # don't need to specify data here since we did in ggplot call
  geom_sf(
    data = site_ecoreg_sf, 
    aes(color = US_L3NAME) 
    #inherit.aes = FALSE # I've found I sometimes need to add this if I am having issues
    ) +
  scale_color_discrete(name = "Level 3 Ecoregion") +
  guides(fill = guide_legend(ncol = 1, title.position = "top")) +
  theme_void() +
  # theme(
  #   legend.position = "bottom",
  #   legend.direction = "vertical"
  # ) +
  ggspatial::annotation_scale() +
  ggspatial::annotation_north_arrow()

```

### Manipulating scale and north arrow 

You'll notice that with the basic options, the scale bar and north arrow overlap,
and the scale or arrow may not display at an appropriate size with the default
options. Some helpful arguments for manipulating the appearance of the scale bar 
and north arrows are shown below. 

**Arguments for both `annotation_scale` and `annotation_north_arrow`**

- `pad_y` and `pad_x`: change the positioning of the arrows from the corner
    
- `height` and `width`: change the size of the arrow

::: {.callout-caution}
You must use the `unit([value], "unit")` function to specify position and size 
options for the padding, height, and width options or the call will return an
error message. For example: 

```
annotation_scale(pad_x = unit(0.5, "cm"))
```
:::
- `style`: 

    - for north arrow, specify style with a call to one of the built-in arrow functions, e.g.
`north_arrow_fancy_orienteering`. This also allows you to change line and text color
of the arrow. 

    - for scale bar, one of "bar" or "ticks"
    
- `location`: general location to put the scalebar or north arrow, e.g. "tl" for 
"top left"

**North arrow only**

- `which_north`: "grid" - north arrow points up; "true" - north arrow points to 
north pole (may need to modify depending on projection)

**Scale bar only**

- `width_hint`: roundabout way of controlling how wide the scale_bar is, which is
the only way to change the number of breaks displayed

- `unit_category`: "metric" or "imperial" units


```{r}
#| fig-width: 8
#| fig-height: 8

ggplot(data = ca_proj_sf) + # specify data here to set CRS 
  geom_spatraster_rgb(data = ca_osm) +
  geom_sf(fill = "transparent", color = "black", linewidth = 1) + 
  geom_sf(
    data = site_ecoreg_sf, 
    aes(color = US_L3NAME) 
    ) +
  scale_color_discrete(name = "Level 3 Ecoregion") +
  guides(fill = guide_legend(ncol = 1, title.position = "top")) +
  theme_void() +
  theme(
    legend.position = "bottom",
    legend.direction = "vertical"
  ) +
  ggspatial::annotation_scale(
    pad_y = unit(0.5, "cm"), 
    width_hint = 0.3,
    unit_category = "imperial"
    ) +
  ggspatial::annotation_north_arrow(
    pad_y = unit(1, "cm"),
    height = unit(0.75, "cm"),
    width = unit(0.75, "cm"),
    style = ggspatial::north_arrow_fancy_orienteering(
      line_col = "grey20",
      fill = c("white", "grey20")
    ))

```



## Exercises

(@) Use the `tigris` package and either `ggspatial` or `maptiles` package to download a 
basemap for a different state and then visualize it with `ggplot`

```{r}
#| eval: false 

# Template code

```

(@) Too easy? Try downloading either another data type from the `tigris` package
(e.g., roads or county lines) or another data repository of your choice and 
plotting that on top of your basemap. 

# Part III: Tips and Tricks

## Making an inset map

```{r dryland-ecoreg}

# select central california dryland ecoregions
ecoreg_sjv <- c("6ac", "6an", "6ak", "6ao", "6am", "6ad") 
ecoreg_pan <- c("6aa", "6ab", "7v", "7u", "6al")
ecoreg_CV <- c("7o", "7m", "7r", "7t", "7s","7q", "7d", "7p", "7n")

# create dataframe for grouping
all_groups <-  data.frame(
  group = c(
    rep("SJV", length(ecoreg_sjv)),
    rep("PAN", length(ecoreg_pan)),
    rep("CV", length(ecoreg_CV))
  ),
  l4_code = c(ecoreg_sjv, ecoreg_pan, ecoreg_CV)
)

# filter ecoregion shapefile to just the l4 codes specified fro the central drylands
all_eco <- ecoreg_sf %>%
  inner_join(all_groups, by = c("US_L4CODE" = "l4_code"))

# remove the inner boundaries of the L4 with st_union to create a shapefile with 
# only L3 boundaries 
all_eco <- all_eco %>% 
  group_by(group) %>%
  summarize(geometry = st_union(geometry)) 

# transform to proper CRS for plotting
dryland_eco_3857 <- st_transform(all_eco, crs = "epsg:3857")

```


```{r}
#| fig-cap: "Map of central California drylands including the San Joaquin Desert. Basemap imagery from ESRI "
#| message: false
#| warning: false

library(cowplot) # for combining maps

# transform outline to get tiles
ca3857 <- st_transform(ca_proj_sf, "epsg:3857")
ca_osm <- get_tiles(
  st_buffer(dryland_eco_3857, 50000), 
  crop = TRUE, 
  zoom = 7, 
  provider = "Esri.WorldImagery"
  )

# create plot boundary with a buffer
# this creates a buffer of 50 km (50000 m, the CRS units)
plot_bbox <- sf::st_bbox(st_buffer(dryland_eco_3857, 50000))

# join the boundaries to remove the L3 ecoregion layers
dryland_eco_join_3857 <- st_union(dryland_eco_3857)

# make inset map
inset_map <- ggplot() + 
  geom_sf(data = dryland_eco_3857, fill = "grey80", color = "black", linewidth = 0.5) + 
  geom_sf(data = ca3857, fill = NA, color = "black", linewidth = 0.4) + 
  theme_bw() +
  theme(axis.text        = element_blank(),
        panel.grid       = element_blank(),
        axis.ticks       = element_blank(),
        panel.background = element_blank(),
        panel.border     = element_blank(),
        plot.background  = element_rect(colour = "black", fill = "white"))

# make main map 
main_map <- ggplot() + 
  tidyterra::geom_spatraster_rgb(data = ca_osm) + 
  geom_sf(data = dryland_eco_join_3857, fill = NA, color = "black", linewidth = 0.7) + 
  geom_sf(data = ca3857, fill = NA, color = "black", linewidth = 0.4) + 
  coord_sf(
    xlim = plot_bbox[c(1,3)],
    ylim = plot_bbox[c(2,4)],
    expand = FALSE
  ) +
  theme_void() +
  ggspatial::annotation_scale(
    text_col = "white", 
    line_col = "black", 
    pad_y    = unit(0.5, "cm")) +
  ggspatial::annotation_north_arrow(
    pad_y = unit(1, "cm"), 
    style =  ggspatial::north_arrow_fancy_orienteering(text_col = 'white', line_col = "white")) 

# combine into one plot
ggdraw() +
  draw_plot(main_map) +
  draw_plot(inset_map,
            height = 0.28,
            x = 0.16,
            y = 0.68)

```

## Creating a Theme and Setting Defaults

### Create your own theme

Specifying the theme parameters each time takes up a lot of code, so I like to
find base theme, modify it, and then save it as a new theme so I can add it to 
the map with one line of code. This also makes it easier to modify multiple plots 
since you will only have to change the code in one place to modify your theme
as opposed to all of your code to make each map. 

For mapping, I like to start with either `theme_bw()` if you want lat/long 
included or `theme_void()` if you don't want any of the normal plot features.

There are a large number of different elements you can control with themes (see
https://ggplot2-book.org/themes for an overview), but to manipulate the plot 
appearance you will usually follow this general template: 

```
plot + theme(element.name = element_function(argument = "option"))
```

Most theme elements are also hierarchical, so they inherit from the parent element.
This means that if you want to change all of the font for your plot, you only need
to change the `text` element. Or, you could just change the `axis.text`. 

```{r create-theme}
theme_bw_ag <- theme_bw(base_size = 14) +
  theme(
    text             = element_text(family = "AvantGarde"),
    panel.background = element_blank(), # use element_blank() to remove elements
    plot.background  = element_blank(),
    panel.border     = element_rect(colour = "grey92"),
    axis.ticks       = element_line(colour = "grey92"),
    axis.text        = element_text(colour = "grey40"),
    axis.text.x      = element_text(angle = 35, hjust = 1, vjust = 1)
  )

```

You can also specify default color and fill options by creating a layer with the 
`theme` and `scale_*_manual` options as shown below

```{r}
# fill colors
ecoreg_fill <- c(
  "#fed725",
  "#cde11d",
  "#98d83e",
  "#67cc5c",
  "#40bd72",
  "#25ac82",
  "#1f998e",
  "#24878e",
  "#2b748e",
  "#34618d",
  "#3d4d8a",
  "#453581",
  "#481c6e",
  "#440154"
)

ecoreg_theme <- list(
  theme_bw(base_size = 14),
  scale_fill_manual(values = ecoreg_fill, name = "US L3 Ecoregion"),
  theme(
    text             = element_text(family = "AvantGarde"),
    panel.background = element_blank(), # use element_blank() to remove elements
    plot.background  = element_blank(),
    panel.border     = element_rect(colour = "grey92"),
    axis.ticks       = element_line(colour = "grey92"),
    axis.text        = element_text(colour = "grey40"),
    axis.text.x      = element_text(angle = 35, hjust = 1, vjust = 1)
  )
)
```

:::{.callout-tip}
For better font support and options see the [**`extrafont`**](https://github.com/wch/extrafont/tree/master) package
:::

```{r}
ggplot() + # don't specify data here since we have multiple data sets to plot
  geom_sf(data = ca_proj_sf, fill = NA) + # must specify "data = " or it will throw an error
  geom_sf(data = ecoreg_sf, aes(fill = US_L3NAME), color = NA) + # like other data you can set fill 
  geom_sf(data = site_ca_proj_sf) +
  guides(fill = guide_legend(ncol = 1, title.position = "top")) +
  ecoreg_theme

```

### Set Geometry Defaults

You are also able to set some defaults for parameters that you can't easily 
modify with `ggplot` themes. For example, specifying shapes and sizes for points 
or linewidth and colors for polygons. 

```{r}
# set defaults for point geometry
update_geom_defaults(
  "point", list(shape = 21, color = "black", fill = "grey20", size = 2)
)

```

```{r}
ggplot() + # don't specify data here since we have multiple data sets to plot
  geom_sf(data = ecoreg_sf, aes(fill = stringr::str_wrap(US_L3NAME, 35)), color = NA) + 
  geom_sf(data = site_ca_proj_sf, alpha = 0.5) +
   geom_sf(data = ca_proj_sf, fill = NA, linewidth = 1, color = "grey40") + 
  guides(fill = guide_legend(ncol = 1, title.position = "top")) +
  ecoreg_theme

```

## Functional Programming 

What if you want to make a lot of maps? Copying and pasting code is annoying and 
also leads to issues with reproducibility. If you are going to be making multiple maps
that are very similar you can turn your call to `ggplot` into a function so that 
all you need to do is provide the data or other parameters you want to manipulate 
and save yourself many lines of code. This will also allow you to more easily 
modify multiple plots by only having to change your code in one place. 

As an example, let's play around with the California ecoregions some more. 



# Additional Resources 

**Other Data Providers**

- [Natural Earth](https://www.naturalearthdata.com/features/)

- [List of Data sites](https://www.paulamoraga.com/book-spatial/r-packages-to-download-open-spatial-data.html)

**other packages**

- [`osmplotr`](https://docs.ropensci.org/osmplotr/index.html#3%20simple%20map): custom images from OSM data

- [`mapview`](https://r-spatial.github.io/mapview/index.html): interactive plotting in r

- [`leaflet`](https://rstudio.github.io/leaflet/): interactive plotting, can use with mapview to create a static map supposedly but best for interactive maps

- [`rayshader`](https://www.rayshader.com/): make 3D plots in R

# References

1. [Geocomputation with R](https://r.geocompx.org/): Free ebook with lots of 
great information and code demos about working with spatial data in R
2. [`sf` Cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/sf.pdf)
3. [`OpenStreetMap` example](https://ajsmit.github.io/Intro_R_Official/mapping-google.html)


